---
title:  "Get Rich (in your repl) Fast"
date:   2023-01-10
categories: repl rich tools dev-environment
---

### Your REPL, Colorized

When I want to do a quick verification on syntax or try a snippet of code, my tool of choice is often my Python REPL [TODO: add a link]. But visually, the experience can be a little...sad.  

<!-- excerpt-end -->

While some developers take pride in using the least attractive, least GUI-fied interface possible, I actually like tech that reflects we've made it past Pong.

[TODO: Pong image]
![st-augustine]({{ "/assets/staugustine.jpeg" | relative_url }}){: .align-center}
*Lord, make me a good venv user, but not yet*
{: .text-center}

On the other hand, I love the terminal. The versatility, speed, and kindd of just the fact that I always have it up makes it the tool of choice for a ton of little admin tasks, including, as I mentioned, playing around in Python.

### Rich

Enter: Rich! Brought to us by the prolific Will McGugan [TODO: link], now of Textualize fame [TODO: link], Rich is a great library for bringing colorful output, including tables, tracebacks, and full-paneled layouts, to the Terminal.

But for our purposes, we're going to rely on just a handful of lines to go from this:

[TODO: rich before]

![before-rich]({{ "/assets/before_rich.jpg" | relative_url }}){: .align-center}
*Lord, make me a good venv user, but not yet*
{: .text-center}

To this:

[TODO: rich after]

![after-rich]({{ "/assets/richafter.jpg" | relative_url }}){: .align-center}
*Lord, make me a good venv user, but not yet*
{: .text-center}

### The Setup

So now you're feeling like Dorothy pre technicolor house-manslaughter. So let's get into how to set this up.

#### Install Rich

To get this to work, you have to make `rich` available to the Python interpreter you use in the terminal. I personally have a script to activate a venv every time I start up my shell. There are reasons you want to keep your global Python clean [TODO: link to the bonus content of requiring a virtual environment before pip installing]

#### Install Pretty

As documented in the Rich docs [TODO: link] (which are fantastic, by the way), to get color printing in your repl, you just need to run these lines:

```python
```

![rich]({{ "/assets/after1.jpg" | relative_url }}){: .align-center}
*Lord, make me a good venv user, but not yet*
{: .text-center}

#### Make it Permanent

Lately, I've been living up to my venv ideals almost entirely due to a little [experimental VS Code extension called WWBD](https://visualstudiomagazine.com/articles/2022/06/10/wwbd.aspx) - What Would Brett Do?

Jesus, in this formulation, has been replaced by Python Jesus/Python core developer [Brett Cannon](https://fosstodon.org/@brettcannon
), who has spent quite a bit of time thinking about Python packaging, environment strategy, and developer best practices. He's now allowing us live a day (ok, fine, maybe just a second) in the life via this extension, which essentially automates venv creation, activation, and VS Code integration according to his virtual environment philosophy.

![python-rc]({{ "/assets/.pythonrc.jpg" | relative_url }}){: .align-center}
*Lord, make me a good venv user, but not yet*
{: .text-center}

### The Caveats

Before people get grumpy, as people on the internet are wont to do, here are some caveats that the project itself is upfront about:

- The extension is experimental and may be swallowed by standard VS Code functionality someday
- The venv strategy is opinionated; if you are using for a large project or have complicated needs, you may want to take the extra 5 minutes to control/customize your own process instead of relying on this extension
- the selected Python interpreter must have venv and pip available/installed ([it has been included in Python binaries by default since Python 3.4](https://peps.python.org/pep-0453/))
- Only works when there is one clear workspace selected

### The Steps

1. Install the "WWBD" extension from the VS Code marketplace
1. To initiate a project, open the workspace, launch the Command Pallette, and type "WWBD: Create Environment"

That's it! Notice that a venv has been created, your workspace is using it to run code by default, and it is successfully added to your `.gitignore` so it's not being tracked by source control.

For more details on what's going on behind the scenes and why, you can refer to the [extension documentation/source code](https://github.com/brettcannon/WWBD) or [Brett's post on virtual environment strategy](https://python1233.rssing.com/chan-44877200/article12053.html), which I believe mirrors his approach in this extension pretty well.

### Hidden Gem

This is already pretty cool. But as an added bonus, if you already have a `requirements.txt` file in your workspace, those dependencies will automatically be installed into your new venv.

That means if you have been working on a project using your global Python interpreter before you saw the error of your ways, you can pipe `pip freeze` to a `requirements.txt` file and be all set to go in your new, enlightened life.

### Bonus

`from rich import print`
